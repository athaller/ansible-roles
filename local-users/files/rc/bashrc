# {{ ansible_managed }}

# .bashrc
# Created: Sat Sep 17, 2005  07:55PM
# Last modified: Thu Jun 09, 2011 02:55PM

if [ "$PS1" ]; then  # If running interactively...

    PROMPT=power

    ##################
    # startup programs
    if [ ! -d "${HOME}/tmp" ]; then
        mkdir ${HOME}/tmp
        chmod 700 ${HOME}/tmp
        echo "${HOME}/tmp was missing.  I created it for you."
    fi

    if [ -e "/usr/bin/uptime" ]; then
        echo "Uptime: ` /usr/bin/uptime`"
    fi

    red='\e[0;31m'
    RED='\e[1;31m'
    blue='\e[0;34m'
    BLUE='\e[1;34m'
    cyan='\e[0;36m'
    CYAN='\e[1;36m'
    green='\e[0;32m'
    GREEN='\e[1;32m'
    yellow='\e[0;33m'
    YELLOW='\e[1;33m'
    NC='\e[0m'

    #####################
    # X DISPLAY functions

    function set_xtitle()
    {
        if [[ $TERM == *xterm* ]]; then
            echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"
        fi
    }

    function host_load()
    {
        THRESHOLD_LOAD=50
        COLOUR_LOW=$GREEN
        COLOUR_HIGH=$RED
        ONE=$(uptime | sed -e "s/.*load average: \(.*\...\),\(.*\...\),\(.*\...\)/\1/" -e "s/ //g")
        ONEHUNDRED=$(echo -e "scale=0 \n $ONE/0.01 \nquit \n" | bc)
        if [ $ONEHUNDRED -gt $THRESHOLD_LOAD ]
            then
                HOST_COLOR=$COLOUR_HIGH
            else
                HOST_COLOR=$COLOUR_LOW
        fi
    }

    function shrhist()
    {
        history -a $HISTFILE
        history -n $HISTFILE
    }

    function power_prompt()
    {
        set_xtitle
        host_load
        shrhist
        if [ "$UID" -eq 0 ]; then
            PS1="[\[${HOST_COLOR}\]\t\[${NC}\]][\[${red}\]\u\[${NC}\]@\[${green}\]\H\[${NC}\]:\[${cyan}\]\w\[${NC}\]]\$ "
        else
            PS1="[\[${HOST_COLOR}\]\t\[${NC}\]][\[${yellow}\]\u\[${NC}\]@\[${green}\]\H\[${NC}\]:\[${cyan}\]\w\[${NC}\]]\$ "
        fi
    }

    function lite_prompt()
    {
        set_xtitle
        shrhist
        if [ "$UID" -eq 0 ]; then
            PS1="[\t][\[${red}\]\u\[${NC}\]@\[${green}\]\H\[${NC}\]:\[${cyan}\]\w\[${NC}\]]\$ "
        else
            PS1="[\t][\[${yellow}\]\u\[${NC}\]@\[${green}\]\H\[${NC}\]:\[${cyan}\]\w\[${NC}\]]\$ "
        fi
    }

    if [ $PROMPT = "power" ]; then
        PROMPT_COMMAND=power_prompt
    else
        PROMPT_COMMAND=lite_prompt
    fi

    ##################
    # on exit function
    function _exit()
    {
        echo -e "${RED}So long and thanks for all the fish${NC}"
    }

    trap _exit EXIT

fi

#################
# Everything else
source ~/.lscolorsrc
if [ -e ~/.bashlocalrc ]; then
    source ~/.bashlocalrc
fi

###############
# bash settings
#umask 007
complete -cf sudo
ulimit -S -c 0      # Don't want any coredumps

shopt -s cdable_vars
shopt -s cdspell         # auto fixes cd / spelling mistakes
shopt -s checkhash
shopt -s checkwinsize
shopt -s cmdhist
shopt -s extglob    # necessary for programmable completion
shopt -s histappend histreedit histverify
shopt -s no_empty_cmd_completion  # bash>=2.04 only
shopt -s sourcepath
shopt -u mailwarn

set -o notify       # notify when jobs running in background terminate
#set -o nounset      # attempt to use undefined variable outputs error message and forces exit
#set -o ignoreeof   # can't c-d out of shell
#set -o xtrace      # useful for debuging
#set -o noclobber    # prevents catting over file

###########
# variables
export EDITOR="vi"
export VISUAL="vi"
export HISTCONTROL=erasedups
export HISTSIZE=10000
export HISTTIMEFORMAT="%Y-%m-%d %T "

#########
# aliases
alias ..="cd .."
alias ls="ls --color=auto -h"
alias be="vi ~/.bashrc;source ~/.bashrc"
alias c="clear"
alias cp="cp -i"
alias df="df -h"
alias la="ls -A"
alias ll="ls -lh"
alias lla="ls -lhA"
alias mkdir="mkdir -p"
alias mv="mv -i"
alias path="env | grep PATH"
alias ps="ps aux"
alias rm="rm -i"
alias sr="screen -d -RR"
alias tc="tar cfvz"
alias tx="tar xfvz"
alias ve="vi ~/.vimrc"
alias vi="vim"

######
# PATH
#if [ "$UID" -eq 0 ]; then
    PATH=$PATH:/usr/local:/usr/local/sbin:/usr/sbin:/sbin
#fi
#PATH=$PATH:$HOME/bin

# remove duplicate path entries
export PATH=$(echo $PATH | awk -F: '
{ for (i = 1; i <= NF; i++) arr[$i]; }
END { for (i in arr) printf "%s:" , i; printf "\n"; } ')

# autocomplete ssh commands
complete -W "$(echo `cat ~/.bash_history | egrep '^ssh ' | sort | uniq | sed 's/^ssh //'`;)" ssh

####################################
# common commands piped through grep
function hg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "search bash history"
        echo "usage: mg [search pattern]"
    else
        history | grep -i $1 | grep -v hg
    fi
}

function lsofg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep lsof"
        echo "usage: losfg [port/program/whatever]"
    else
        lsof | grep -i $1 | less
    fi
}

function psg()
{
    if [ $# -lt 1 ] || [ $# -gt 1 ]; then
        echo "grep running processes"
        echo "usage: psg [process]"
    else
        ps aux | grep USER | grep -v grep
        ps aux | grep -i $1 | grep -v grep
    fi
}

#########################
# random useful functions
function apath()
{
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "Temporarily add to PATH"
        echo "usage: apath [dir]"
    else
        PATH=$1:$PATH
    fi
}

function ds()
{
    echo "size of directories in MB"
    if [ $# -lt 1 ] || [ $# -gt 2 ]; then
        echo "you did not specify a directy, using pwd"
        DIR=$(pwd)
        find $DIR -maxdepth 1 -type d -exec du -sm \{\} \; | sort -nr
    else
        find $1 -maxdepth 1 -type d -exec du -sm \{\} \; | sort -nr
    fi
}

function ii()
{
    echo -e "\n${RED}You are logged onto:$NC " ; hostname
    echo -e "\n${RED}Additionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date:$NC " ; date
    echo -e "\n${RED}Machine stat:$NC " ; uptime
    echo -e "\n${RED}Disk space:$NC " ; df -h
    echo -e "\n${RED}Memory stats (in MB):$NC " ;
    free -m
    echo -e "\n${RED}IPs:$NC " ; ips
}

function ips()
{
    for i in $( /sbin/ifconfig | grep ^e | awk '{print $1}' | sed 's/://' ); do echo -n "$i: ";  /sbin/ifconfig $i | perl -nle'/dr:(\S+)/ && print $1'; done
}
